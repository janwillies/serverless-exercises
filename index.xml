<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Custom Dev and TA Conference Day 2017</title>
    <link>http://example.org/</link>
    <description>Recent content on Custom Dev and TA Conference Day 2017</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Function</title>
      <link>http://example.org/01_hello/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/01_hello/</guid>
      <description>In this exercise we will write a simple function in python and upload it to kubeless. It can be triggered by an HTTP-Call afterwards
Create Function Edit the sourcecode for the function with vim hello.py:
import json def handler(): # create the response json response = {&amp;quot;text&amp;quot;: &amp;quot;Hello, World&amp;quot;} return json.dumps(response)  It&amp;rsquo;s a simple function which responds with Hello, World when called.
Now deploy the function to kubeless, replace &amp;lt;TEAM-NAME&amp;gt; with something meaningful:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://example.org/01_gettingstarted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/01_gettingstarted/</guid>
      <description>Chatroom Create an account on https://mattermost.containercluster.net if you haven&amp;rsquo;t already.
Setting up the IDE You can either SSH into our lab environment, or use an IDE on your laptop.</description>
    </item>
    
    <item>
      <title>Mattermost</title>
      <link>http://example.org/02_mattermost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/02_mattermost/</guid>
      <description>Now we can create a slash-command in Mattermost to interact with our function. A slash-command allows you to enter a / followed by a command, and optionally some arguments, then an HTTP request will be sent to our function.
Login to Mattermost and look for the Integrations menu:
Then click Slash Command and Add Slash Command.
Fill in the following:
   Key Values     Display Name &amp;lt;TEAM-NAME&amp;gt;-echo   Description Echo Bot   Command Trigger Word &amp;lt;TEAM-NAME&amp;gt;-echo   Request URL http://&amp;lt;TEAM-NAME&amp;gt;-echo.</description>
    </item>
    
    <item>
      <title>Update a Function</title>
      <link>http://example.org/02_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/02_update/</guid>
      <description>Let&amp;rsquo;s make our example a bit more specific. Edit the sourcecode in hello.py and replace World with Frankfurt. Then re-upload to kubeless:
kubeless function update &amp;lt;TEAM-NAME&amp;gt;-hello --runtime python27 --handler hello.handler --from-file hello.py  Watch the new function getting deployed:
watch kubectl get pods &amp;lt;ctrl&amp;gt;-c  We can also list all functions:
$ kubeless function list +----------+-----------+---------------+----------+------+-------+--------------+ | NAME | NAMESPACE | HANDLER | RUNTIME | TYPE | TOPIC | DEPENDENCIES | +----------+-----------+---------------+----------+------+-------+--------------+ | hello | default | hello.</description>
    </item>
    
    <item>
      <title>Echo Service</title>
      <link>http://example.org/01_echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/01_echo/</guid>
      <description>Not a whole lot useful to just trigger functions. We want to hand some data to the function. Let&amp;rsquo;s create a function which handles a POST.
Create Echo Function Edit the sourcecode for the function with vim echo.py:
import json def handler(context): # user_id = context.forms.user_id # response_url = context.forms.response_url # token = context.forms.token # channel_id = context.forms.channel_id # team_id = context.forms.team_id # command = context.forms.command # team_domain = context.</description>
    </item>
    
    <item>
      <title>Exercise 1</title>
      <link>http://example.org/ex1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ex1/</guid>
      <description>handle input from mattermost chat</description>
    </item>
    
    <item>
      <title>Exercise 2</title>
      <link>http://example.org/ex2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ex2/</guid>
      <description>yoda api?</description>
    </item>
    
    <item>
      <title>Exercise 3</title>
      <link>http://example.org/ex3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ex3/</guid>
      <description>nodejs app</description>
    </item>
    
    <item>
      <title>Exercise 4</title>
      <link>http://example.org/ex4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ex4/</guid>
      <description>scale application on kubernets?</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/_header/</guid>
      <description>Frankfurt 2017</description>
    </item>
    
    <item>
      <title>Contacts</title>
      <link>http://example.org/contacts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/contacts/</guid>
      <description> jan.willies@accenture.com jan.p.delgado.kramer@accenture.com roman.schiefer@accenture.com  </description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>http://example.org/01_debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/01_debug/</guid>
      <description>Calling the kubeless binary without any parameters prints out the available options:
function command allows user to list, deploy, edit, delete functions running on Kubeless Usage: kubeless function SUBCOMMAND [flags] kubeless function [command] Available Commands: call call function from cli delete delete a function from Kubeless deploy deploy a function to Kubeless describe describe a function deployed to Kubeless list list all functions deployed to Kubeless logs get logs from a running function update update a function on Kubeless Flags: -h, --help help for function Use &amp;quot;kubeless function [command] --help&amp;quot; for more information about a command.</description>
    </item>
    
  </channel>
</rss>