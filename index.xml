<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Custom Dev and TA Conference Day 2017</title>
    <link>http://serverless.containercluster.net/</link>
    <description>Recent content on Custom Dev and TA Conference Day 2017</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://serverless.containercluster.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Function</title>
      <link>http://serverless.containercluster.net/gettingstarted/firstfunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/gettingstarted/firstfunction/</guid>
      <description>In this exercise we will write a simple function in python and upload it to kubeless. It can be triggered by an HTTP-Call afterwards
Create Function Edit the sourcecode for the function with vim hello.py:
import json def handler(): # create the response json response = {&amp;quot;text&amp;quot;: &amp;quot;Hello, World&amp;quot;} return json.dumps(response)  It&amp;rsquo;s a simple function which responds with Hello, World when called.
Now deploy the function to kubeless, replace &amp;lt;TEAM-NAME&amp;gt; with something meaningful:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://serverless.containercluster.net/gettingstarted/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/gettingstarted/install/</guid>
      <description>Chatroom Create an account on https://mattermost.containercluster.net if you haven&amp;rsquo;t already.
Setting up the IDE You can either SSH into our lab environment, or use an IDE on your laptop.
Using your own laptop will only work if you have Linux or OS X available
 1. Use the provided environment SSH into the lab environment with the credentials provided in the chatroom. You may need to download an SSH-Client like putty for that.</description>
    </item>
    
    <item>
      <title>Mattermost</title>
      <link>http://serverless.containercluster.net/mattermost/slash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/mattermost/slash/</guid>
      <description>Now we can create a slash-command in Mattermost to interact with our function. A slash-command allows you to enter a / followed by a command, and optionally some arguments, then an HTTP request will be sent to our function.
Login to Mattermost and look for the Integrations menu:
Then click Slash Command and Add Slash Command.
Fill in the following:
   Key Values     Display Name &amp;lt;TEAM-NAME&amp;gt;-echo   Description Echo Bot   Command Trigger Word &amp;lt;TEAM-NAME&amp;gt;-echo   Request URL http://&amp;lt;TEAM-NAME&amp;gt;-echo.</description>
    </item>
    
    <item>
      <title>Update a Function</title>
      <link>http://serverless.containercluster.net/gettingstarted/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/gettingstarted/update/</guid>
      <description>Let&amp;rsquo;s make our example a bit more specific. Edit the sourcecode in hello.py and replace World with Frankfurt. Then re-upload to kubeless:
kubeless function update &amp;lt;TEAM-NAME&amp;gt;-hello --runtime python27 --handler hello.handler --from-file hello.py  Watch the new function getting deployed:
watch kubectl get pods &amp;lt;ctrl&amp;gt;-c  We can also list all functions:
$ kubeless function list +----------+-----------+---------------+----------+------+-------+--------------+ | NAME | NAMESPACE | HANDLER | RUNTIME | TYPE | TOPIC | DEPENDENCIES | +----------+-----------+---------------+----------+------+-------+--------------+ | hello | default | hello.</description>
    </item>
    
    <item>
      <title>Echo Service</title>
      <link>http://serverless.containercluster.net/gettingstarted/echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/gettingstarted/echo/</guid>
      <description>Not a whole lot useful to just trigger functions. We want to hand some data to the function. Let&amp;rsquo;s create a function which handles a POST.
Create Echo Function Edit the sourcecode for the function with vim echo.py:
import json def handler(context): # user_id = context.forms.user_id # response_url = context.forms.response_url # token = context.forms.token # channel_id = context.forms.channel_id # team_id = context.forms.team_id # command = context.forms.command # team_domain = context.</description>
    </item>
    
    <item>
      <title>Exercise 1</title>
      <link>http://serverless.containercluster.net/ex1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/ex1/</guid>
      <description>Parse input from mattermost chat and query a REST API. In our particular example, we&amp;rsquo;ll query the ycombinator API:
import httplib, urllib import xml.etree.ElementTree import json def handler(): conn = httplib.HTTPSConnection(&amp;quot;news.ycombinator.com&amp;quot;) conn.request(&amp;quot;GET&amp;quot;, &amp;quot;/rss&amp;quot;) r1 = conn.getresponse() # print r1.status, r1.reason data = r1.read() e = xml.etree.ElementTree.fromstring(data) channel = e.findall(&amp;quot;channel/item&amp;quot;) response = &amp;quot;&amp;quot; for child in channel: title = child.find(&amp;quot;title&amp;quot;) url = child.find(&amp;quot;link&amp;quot;) response = response + title.text + &amp;quot;\n&amp;quot; conn.close() # format the response object for mattermost return json.</description>
    </item>
    
    <item>
      <title>Exercise 2</title>
      <link>http://serverless.containercluster.net/ex2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/ex2/</guid>
      <description>Now that we are python experts, we can move on to JavaScript. The following code implements an echo service in JavaScript:
const querystring = require(&#39;querystring&#39;); module.exports = { handler: function (req, res) { var body = [] req.on(&#39;error&#39;, (err) =&amp;gt; console.error(err) ).on(&#39;data&#39;, (chunk) =&amp;gt; body.push(chunk) ).on(&#39;end&#39;, () =&amp;gt; { body = Buffer.concat(body).toString() let qs = querystring.parse(body) console.log(&amp;quot;querystring: &amp;quot;, qs) let resp = { &amp;quot;response_type&amp;quot;: &amp;quot;in_channel&amp;quot;, &amp;quot;text&amp;quot;: qs.text } res.end(JSON.stringify(resp)) }) } }  We use the LTS Version of nodejs (v6.</description>
    </item>
    
    <item>
      <title>Exercise 3</title>
      <link>http://serverless.containercluster.net/ex3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/ex3/</guid>
      <description>Make a request to the Zalando API and print the latest 5 sport shoes on sale. With pictures!
The api is available here: https://api.zalando.com/swagger/index.html
Here is some help to format the message: https://docs.mattermost.com/developer/slash-commands.html</description>
    </item>
    
    <item>
      <title>Exercise 4</title>
      <link>http://serverless.containercluster.net/ex4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/ex4/</guid>
      <description>Query the Kubernetes API!
Here&amp;rsquo;s a hint:
from kubernetes import client, config config.load_incluster_config() v1=client.CoreV1Api()  An important factor is how to bring dependencies. In python this is done via a file called requirements.txt. Let&amp;rsquo;s create a file with vim requirements.txt:
kubernetes  and then deploy with --dependencies:
kubeless function deploy [...] --trigger-http --dependencies requirements.txt  </description>
    </item>
    
    <item>
      <title>Public APIs</title>
      <link>http://serverless.containercluster.net/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/rest/</guid>
      <description>Further ideas:
 https://kubernetes.io/docs/api-reference/v1.5/ https://market.mashape.com/explore?sort=developers https://api.zalando.com/swagger/index.html https://developer.marvel.com/  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://serverless.containercluster.net/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/_header/</guid>
      <description>Frankfurt 2017</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>http://serverless.containercluster.net/gettingstarted/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://serverless.containercluster.net/gettingstarted/debug/</guid>
      <description>Calling the kubeless binary without any parameters prints out the available options:
function command allows user to list, deploy, edit, delete functions running on Kubeless Usage: kubeless function SUBCOMMAND [flags] kubeless function [command] Available Commands: call call function from cli delete delete a function from Kubeless deploy deploy a function to Kubeless describe describe a function deployed to Kubeless list list all functions deployed to Kubeless logs get logs from a running function update update a function on Kubeless Flags: -h, --help help for function Use &amp;quot;kubeless function [command] --help&amp;quot; for more information about a command.</description>
    </item>
    
  </channel>
</rss>